import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.black900,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray100C1,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.teal50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 16.fSize,
          fontFamily: 'Titillium Web',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: Color(0XFFA5A1A1),
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700.withOpacity(0.49),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 45.fSize,
          fontFamily: 'Titillium Web',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: Color(0XFFA456F6),
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 22.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFA456F6),
    primaryContainer: Color(0XFF1F1E1E),
    secondaryContainer: Color(0XFF787373),

    // Error colors
    errorContainer: Color(0XFF676262),
    onError: Color(0XFFFB847C),

    // On colors(text colors)
    onPrimary: Color(0X82001A51),
    onPrimaryContainer: Color(0XFF91B8FF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue20087 => Color(0X8796D4F1);
  Color get blue300 => Color(0XFF6399F9);
  Color get blue50 => Color(0XFFE5EDFD);
  Color get blue5001 => Color(0XFFE0EBFE);
  Color get blueA200 => Color(0XFF3787FF);

  // BlueGrayC
  Color get blueGray100C1 => Color(0XC1D2D2D2);

  // BlueGray
  Color get blueGray300 => Color(0XFF9DAFB6);
  Color get blueGray30001 => Color(0XFF9CADB7);
  Color get blueGray400 => Color(0XFF878787);
  Color get blueGray40001 => Color(0XFF898989);
  Color get blueGray900 => Color(0XFF011A51);

  // BlueGraya
  Color get blueGray4003a => Color(0X3A8A8A8A);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFFFA3A3);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD6D5EE);
  Color get deepPurple10001 => Color(0XFFD0A8FF);
  Color get deepPurple200 => Color(0XFFAF96ED);
  Color get deepPurple600 => Color(0XFF5222CD);
  Color get deepPurpleA100 => Color(0XFFCD9FFD);
  Color get deepPurpleA10001 => Color(0XFFAF70F1);
  Color get deepPurpleA10002 => Color(0XFFA767F1);
  Color get deepPurpleA10003 => Color(0XFFAA61FF);
  Color get deepPurpleA200 => Color(0XFFA650FF);
  Color get deepPurpleA20001 => Color(0XFF9C52EA);
  Color get deepPurpleA20002 => Color(0XFFA550FF);

  // Gray
  Color get gray100 => Color(0XFFF7F2FC);
  Color get gray10001 => Color(0XFFF6F2FB);
  Color get gray10002 => Color(0XFFF0F0FE);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray300 => Color(0XFFD8E0F0);
  Color get gray30001 => Color(0XFFD6E0F2);
  Color get gray30002 => Color(0XFFE1D4EF);
  Color get gray40075 => Color(0X75C8BDBD);
  Color get gray50 => Color(0XFFFCF9FF);
  Color get gray500 => Color(0XFFADA8A8);
  Color get gray50001 => Color(0XFF958585);
  Color get gray5001 => Color(0XFFFBF9FF);
  Color get gray5002 => Color(0XFFF8F1FE);
  Color get gray5003 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF808080);
  Color get gray60001 => Color(0XFF847575);
  Color get gray60002 => Color(0XFF757171);
  Color get gray60003 => Color(0XFF6E6E6E);
  Color get gray60004 => Color(0XFF787878);
  Color get gray700 => Color(0XFF656565);
  Color get gray70001 => Color(0XFF5C5B5B);
  Color get gray900 => Color(0XFF201E1E);
  Color get gray90001 => Color(0XFF1A1A1A);

  // Indigo
  Color get indigo400 => Color(0XFF6B68D2);
  Color get indigoA100 => Color(0XFFA2ABFF);
  Color get indigoA10001 => Color(0XFFA3ACFF);

  // LightBlue
  Color get lightBlue50 => Color(0XFFCEECFE);

  // Orange
  Color get orange200 => Color(0XFFF2C67C);
  Color get orangeA200 => Color(0XFFFE9738);

  // Pink
  Color get pink50 => Color(0XFFF0DDE5);

  // Purple
  Color get purple100 => Color(0XFFEFAFFF);
  Color get purpleA100 => Color(0XFFECA3FF);
  Color get purpleA10001 => Color(0XFFD274FF);
  Color get purpleA200 => Color(0XFFBF44FA);

  // Red
  Color get red100 => Color(0XFFF2D8D0);
  Color get redA100 => Color(0XFFFF8989);

  // Teal
  Color get teal100 => Color(0XFFC0E7DB);
  Color get teal200 => Color(0XFF76D4B5);
  Color get teal300 => Color(0XFF46C198);
  Color get teal50 => Color(0XFFE2E8EA);
  Color get tealA100 => Color(0XFFA3F9FF);
  Color get tealA10001 => Color(0XFFA3FFFF);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
